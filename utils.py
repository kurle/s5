# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E_0TWBubPlhgbTyhLR5hu4nUAw-gsGZI

CODE BLOCK: 1
"""

import torch
import torch.nn.functional as F
from tqdm import tqdm
import matplotlib.pyplot as plt

"""CODE BLOCK: 9"""

def GetCorrectPredCount(pPrediction, pLabels):
  """
  Calculates the number of correct predictions.

  Parameters:
    pPrediction (torch.Tensor): Predictions made by the model.
    pLabels (torch.Tensor): Ground truth labels.

  Returns:
        int: Number of correct predictions.
  """
  return pPrediction.argmax(dim=1).eq(pLabels).sum().item()

def train(model, device, train_loader, optimizer, criterion, train_losses, train_acc):
  """
    Trains the model on the training data.
  """
  model.train()
  pbar = tqdm(train_loader)

  train_loss = 0
  correct = 0
  processed = 0

  for batch_idx, (data, target) in enumerate(pbar):

    # Move data and target tensors to the appropriate device (GPU or CPU)
    data, target = data.to(device), target.to(device)

    # Clear the gradients from previous iteration
    optimizer.zero_grad()

    # Predict
    pred = model(data)

    # Calculate loss
    loss = criterion(pred, target)
    train_loss+=loss.item()

    # Backward pass: compute gradient of the loss with respect to model parameters
    loss.backward()

    # Update the parameters of the model
    optimizer.step()

    # Calculate accuracy
    correct += GetCorrectPredCount(pred, target)
    processed += len(data)

    # # Update progress bar with loss and accuracy
    pbar.set_description(desc= f'Train: Loss={loss.item():0.4f} Batch_id={batch_idx} Accuracy={100*correct/processed:0.2f}')

  train_acc.append(100*correct/processed)
  train_losses.append(train_loss/len(train_loader))

def test(model, device, test_loader, criterion, test_losses, test_acc):
    model.eval()

    test_loss = 0
    correct = 0

    with torch.no_grad(): # Disable gradient calculation
        for batch_idx, (data, target) in enumerate(test_loader):
            data, target = data.to(device), target.to(device)

            output = model(data)
            test_loss += criterion(output, target, reduction='sum').item()  # sum up batch loss

            correct += GetCorrectPredCount(output, target)


    test_loss /= len(test_loader.dataset)
    test_acc.append(100. * correct / len(test_loader.dataset))
    test_losses.append(test_loss)

    print('Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))

"""CODE BLOCK: 11"""

def plot_train_metrics(train_losses, train_acc, test_losses, test_acc):
  fig, axs = plt.subplots(2,2,figsize=(15,10))
  axs[0, 0].plot(train_losses)
  axs[0, 0].set_title("Training Loss")
  axs[1, 0].plot(train_acc)
  axs[1, 0].set_title("Training Accuracy")
  axs[0, 1].plot(test_losses)
  axs[0, 1].set_title("Test Loss")
  axs[1, 1].plot(test_acc)
  axs[1, 1].set_title("Test Accuracy")